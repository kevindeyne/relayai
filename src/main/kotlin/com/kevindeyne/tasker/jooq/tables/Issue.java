/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.IssueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends TableImpl<IssueRecord> {

    private static final long serialVersionUID = 740507945;

    /**
     * The reference instance of <code>taskr.issue</code>
     */
    public static final Issue ISSUE = new Issue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssueRecord> getRecordType() {
        return IssueRecord.class;
    }

    /**
     * The column <code>taskr.issue.id</code>.
     */
    public final TableField<IssueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.issue.title</code>.
     */
    public final TableField<IssueRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.issue.description</code>.
     */
    public final TableField<IssueRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>taskr.issue.assigned</code>.
     */
    public final TableField<IssueRecord, Long> ASSIGNED = createField("assigned", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.issue.create_date</code>.
     */
    public final TableField<IssueRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>taskr.issue.create_user</code>.
     */
    public final TableField<IssueRecord, String> CREATE_USER = createField("create_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.issue.update_date</code>.
     */
    public final TableField<IssueRecord, Timestamp> UPDATE_DATE = createField("update_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>taskr.issue.update_user</code>.
     */
    public final TableField<IssueRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.issue.sprint_id</code>.
     */
    public final TableField<IssueRecord, Long> SPRINT_ID = createField("sprint_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.issue.project_id</code>.
     */
    public final TableField<IssueRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.issue.status</code>.
     */
    public final TableField<IssueRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(35).nullable(false).defaultValue(org.jooq.impl.DSL.inline("NEW", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>taskr.issue.impact</code>.
     */
    public final TableField<IssueRecord, String> IMPACT = createField("impact", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("NORMAL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>taskr.issue.urgency</code>.
     */
    public final TableField<IssueRecord, String> URGENCY = createField("urgency", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("NORMAL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>taskr.issue.workload</code>.
     */
    public final TableField<IssueRecord, Integer> WORKLOAD = createField("workload", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>taskr.issue.importance</code>.
     */
    public final TableField<IssueRecord, Integer> IMPORTANCE = createField("importance", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>taskr.issue.overload</code>.
     */
    public final TableField<IssueRecord, Byte> OVERLOAD = createField("overload", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>taskr.issue</code> table reference
     */
    public Issue() {
        this(DSL.name("issue"), null);
    }

    /**
     * Create an aliased <code>taskr.issue</code> table reference
     */
    public Issue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>taskr.issue</code> table reference
     */
    public Issue(Name alias) {
        this(alias, ISSUE);
    }

    private Issue(Name alias, Table<IssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issue(Name alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISSUE_PRIMARY, Indexes.ISSUE_PROJECT_ID, Indexes.ISSUE_SPRINT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IssueRecord, Long> getIdentity() {
        return Keys.IDENTITY_ISSUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IssueRecord> getPrimaryKey() {
        return Keys.KEY_ISSUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IssueRecord>> getKeys() {
        return Arrays.<UniqueKey<IssueRecord>>asList(Keys.KEY_ISSUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IssueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IssueRecord, ?>>asList(Keys.ISSUE_IBFK_1, Keys.ISSUE_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Issue as(String alias) {
        return new Issue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Issue as(Name alias) {
        return new Issue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(String name) {
        return new Issue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Name name) {
        return new Issue(name, null);
    }
}
