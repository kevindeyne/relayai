/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.BranchRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Branch extends TableImpl<BranchRecord> {

    private static final long serialVersionUID = 277525078;

    /**
     * The reference instance of <code>taskr.branch</code>
     */
    public static final Branch BRANCH = new Branch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BranchRecord> getRecordType() {
        return BranchRecord.class;
    }

    /**
     * The column <code>taskr.branch.id</code>.
     */
    public final TableField<BranchRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.branch.title</code>.
     */
    public final TableField<BranchRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.branch.project_id</code>.
     */
    public final TableField<BranchRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>taskr.branch</code> table reference
     */
    public Branch() {
        this(DSL.name("branch"), null);
    }

    /**
     * Create an aliased <code>taskr.branch</code> table reference
     */
    public Branch(String alias) {
        this(DSL.name(alias), BRANCH);
    }

    /**
     * Create an aliased <code>taskr.branch</code> table reference
     */
    public Branch(Name alias) {
        this(alias, BRANCH);
    }

    private Branch(Name alias, Table<BranchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Branch(Name alias, Table<BranchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BRANCH_PRIMARY, Indexes.BRANCH_PROJECT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BranchRecord, Long> getIdentity() {
        return Keys.IDENTITY_BRANCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BranchRecord> getPrimaryKey() {
        return Keys.KEY_BRANCH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BranchRecord>> getKeys() {
        return Arrays.<UniqueKey<BranchRecord>>asList(Keys.KEY_BRANCH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BranchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BranchRecord, ?>>asList(Keys.BRANCH_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Branch as(String alias) {
        return new Branch(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Branch as(Name alias) {
        return new Branch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Branch rename(String name) {
        return new Branch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Branch rename(Name name) {
        return new Branch(name, null);
    }
}
