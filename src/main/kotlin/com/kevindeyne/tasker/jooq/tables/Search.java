/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.SearchRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Search extends TableImpl<SearchRecord> {

    private static final long serialVersionUID = -235728623;

    /**
     * The reference instance of <code>taskr.search</code>
     */
    public static final Search SEARCH = new Search();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SearchRecord> getRecordType() {
        return SearchRecord.class;
    }

    /**
     * The column <code>taskr.search.id</code>.
     */
    public final TableField<SearchRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.search.project_id</code>.
     */
    public final TableField<SearchRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.search.type</code>.
     */
    public final TableField<SearchRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.search.srcval</code>.
     */
    public final TableField<SearchRecord, String> SRCVAL = createField("srcval", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>taskr.search.name</code>.
     */
    public final TableField<SearchRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>taskr.search.linked_id</code>.
     */
    public final TableField<SearchRecord, Long> LINKED_ID = createField("linked_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>taskr.search</code> table reference
     */
    public Search() {
        this(DSL.name("search"), null);
    }

    /**
     * Create an aliased <code>taskr.search</code> table reference
     */
    public Search(String alias) {
        this(DSL.name(alias), SEARCH);
    }

    /**
     * Create an aliased <code>taskr.search</code> table reference
     */
    public Search(Name alias) {
        this(alias, SEARCH);
    }

    private Search(Name alias, Table<SearchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Search(Name alias, Table<SearchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEARCH_PRIMARY, Indexes.SEARCH_SEARCH_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SearchRecord, Long> getIdentity() {
        return Keys.IDENTITY_SEARCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SearchRecord> getPrimaryKey() {
        return Keys.KEY_SEARCH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SearchRecord>> getKeys() {
        return Arrays.<UniqueKey<SearchRecord>>asList(Keys.KEY_SEARCH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Search as(String alias) {
        return new Search(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Search as(Name alias) {
        return new Search(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Search rename(String name) {
        return new Search(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Search rename(Name name) {
        return new Search(name, null);
    }
}
