/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.InvitationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invitation extends TableImpl<InvitationRecord> {

    private static final long serialVersionUID = -1206264925;

    /**
     * The reference instance of <code>taskr.invitation</code>
     */
    public static final Invitation INVITATION = new Invitation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationRecord> getRecordType() {
        return InvitationRecord.class;
    }

    /**
     * The column <code>taskr.invitation.id</code>.
     */
    public final TableField<InvitationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.invitation.project_id</code>.
     */
    public final TableField<InvitationRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.invitation.invitation_key</code>.
     */
    public final TableField<InvitationRecord, String> INVITATION_KEY = createField("invitation_key", org.jooq.impl.SQLDataType.VARCHAR(35).nullable(false), this, "");

    /**
     * The column <code>taskr.invitation.valid_until</code>.
     */
    public final TableField<InvitationRecord, Timestamp> VALID_UNTIL = createField("valid_until", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>taskr.invitation.email</code>.
     */
    public final TableField<InvitationRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(35).nullable(false), this, "");

    /**
     * The column <code>taskr.invitation.role</code>.
     */
    public final TableField<InvitationRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * Create a <code>taskr.invitation</code> table reference
     */
    public Invitation() {
        this(DSL.name("invitation"), null);
    }

    /**
     * Create an aliased <code>taskr.invitation</code> table reference
     */
    public Invitation(String alias) {
        this(DSL.name(alias), INVITATION);
    }

    /**
     * Create an aliased <code>taskr.invitation</code> table reference
     */
    public Invitation(Name alias) {
        this(alias, INVITATION);
    }

    private Invitation(Name alias, Table<InvitationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invitation(Name alias, Table<InvitationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVITATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InvitationRecord, Long> getIdentity() {
        return Keys.IDENTITY_INVITATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InvitationRecord> getPrimaryKey() {
        return Keys.KEY_INVITATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InvitationRecord>> getKeys() {
        return Arrays.<UniqueKey<InvitationRecord>>asList(Keys.KEY_INVITATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invitation as(String alias) {
        return new Invitation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Invitation as(Name alias) {
        return new Invitation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(String name) {
        return new Invitation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invitation rename(Name name) {
        return new Invitation(name, null);
    }
}
