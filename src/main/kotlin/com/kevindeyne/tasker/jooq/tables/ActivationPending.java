/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.ActivationPendingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivationPending extends TableImpl<ActivationPendingRecord> {

    private static final long serialVersionUID = 931999316;

    /**
     * The reference instance of <code>taskr.activation_pending</code>
     */
    public static final ActivationPending ACTIVATION_PENDING = new ActivationPending();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivationPendingRecord> getRecordType() {
        return ActivationPendingRecord.class;
    }

    /**
     * The column <code>taskr.activation_pending.id</code>.
     */
    public final TableField<ActivationPendingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.activation_pending.user_id</code>.
     */
    public final TableField<ActivationPendingRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taskr.activation_pending.activation_key</code>.
     */
    public final TableField<ActivationPendingRecord, String> ACTIVATION_KEY = createField("activation_key", org.jooq.impl.SQLDataType.VARCHAR(35).nullable(false), this, "");

    /**
     * The column <code>taskr.activation_pending.valid_until</code>.
     */
    public final TableField<ActivationPendingRecord, Timestamp> VALID_UNTIL = createField("valid_until", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>taskr.activation_pending</code> table reference
     */
    public ActivationPending() {
        this(DSL.name("activation_pending"), null);
    }

    /**
     * Create an aliased <code>taskr.activation_pending</code> table reference
     */
    public ActivationPending(String alias) {
        this(DSL.name(alias), ACTIVATION_PENDING);
    }

    /**
     * Create an aliased <code>taskr.activation_pending</code> table reference
     */
    public ActivationPending(Name alias) {
        this(alias, ACTIVATION_PENDING);
    }

    private ActivationPending(Name alias, Table<ActivationPendingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActivationPending(Name alias, Table<ActivationPendingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACTIVATION_PENDING_PRIMARY, Indexes.ACTIVATION_PENDING_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ActivationPendingRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACTIVATION_PENDING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ActivationPendingRecord> getPrimaryKey() {
        return Keys.KEY_ACTIVATION_PENDING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ActivationPendingRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivationPendingRecord>>asList(Keys.KEY_ACTIVATION_PENDING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ActivationPendingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActivationPendingRecord, ?>>asList(Keys.ACTIVATION_PENDING_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivationPending as(String alias) {
        return new ActivationPending(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ActivationPending as(Name alias) {
        return new ActivationPending(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivationPending rename(String name) {
        return new ActivationPending(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActivationPending rename(Name name) {
        return new ActivationPending(name, null);
    }
}
