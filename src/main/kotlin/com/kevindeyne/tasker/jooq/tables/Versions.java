/*
 * This file is generated by jOOQ.
*/
package com.kevindeyne.tasker.jooq.tables;


import com.kevindeyne.tasker.jooq.Indexes;
import com.kevindeyne.tasker.jooq.Keys;
import com.kevindeyne.tasker.jooq.Taskr;
import com.kevindeyne.tasker.jooq.tables.records.VersionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Versions extends TableImpl<VersionsRecord> {

    private static final long serialVersionUID = 1757945961;

    /**
     * The reference instance of <code>taskr.versions</code>
     */
    public static final Versions VERSIONS = new Versions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VersionsRecord> getRecordType() {
        return VersionsRecord.class;
    }

    /**
     * The column <code>taskr.versions.id</code>.
     */
    public final TableField<VersionsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>taskr.versions.project_id</code>.
     */
    public final TableField<VersionsRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>taskr.versions.branch_id</code>.
     */
    public final TableField<VersionsRecord, Long> BRANCH_ID = createField("branch_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("-1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>taskr.versions.version</code>.
     */
    public final TableField<VersionsRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>taskr.versions</code> table reference
     */
    public Versions() {
        this(DSL.name("versions"), null);
    }

    /**
     * Create an aliased <code>taskr.versions</code> table reference
     */
    public Versions(String alias) {
        this(DSL.name(alias), VERSIONS);
    }

    /**
     * Create an aliased <code>taskr.versions</code> table reference
     */
    public Versions(Name alias) {
        this(alias, VERSIONS);
    }

    private Versions(Name alias, Table<VersionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Versions(Name alias, Table<VersionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Taskr.TASKR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VERSIONS_BRANCH_ID, Indexes.VERSIONS_PRIMARY, Indexes.VERSIONS_PROJECT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<VersionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_VERSIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VersionsRecord> getPrimaryKey() {
        return Keys.KEY_VERSIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VersionsRecord>> getKeys() {
        return Arrays.<UniqueKey<VersionsRecord>>asList(Keys.KEY_VERSIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VersionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VersionsRecord, ?>>asList(Keys.VERSIONS_IBFK_1, Keys.VERSIONS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Versions as(String alias) {
        return new Versions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Versions as(Name alias) {
        return new Versions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Versions rename(String name) {
        return new Versions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Versions rename(Name name) {
        return new Versions(name, null);
    }
}
